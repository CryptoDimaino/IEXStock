@{
    ViewData["Title"] = "TOPS Test";
}

<style>
.change {
    font-size: 20px;
    font-weight: bold;
}
</style>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<!-- <meta http-equiv="refresh" content="2"> -->
<div class="text-center">
    <h1 class="display-4">TOPS Test</h1>
</div>
<br>
<input type="hidden" id="customInput1" data-value="@ViewBag.TOPSJson" />
<div class="grid-container">
    <div class="grid-item">
        <p id="MSFT"></p>
    </div>
    <div class="grid-item">
        <p id="AAPL"></p>
    </div>
    <div class="grid-item">
        <p id="AMZN"></p>
    </div>
    <div class="grid-item">
        <p id="FB"></p>
    </div>
    <div class="grid-item">
        <p id="AMD"></p>
    </div>
    <div class="grid-item">
        <p id="INTC"></p>
    </div>
</div>
<script>
$(document).ready(function()
{
    const loadData = () =>
    {
		var symbols = "MSFT,AAPL,FB,AMZN,AMD,INTC";

        // Used when multiple symbols are called from seperate api calls.
        //symbols.forEach(symbol => makeAjaxCall(symbol));
        
        // Run through API
        makeAjaxCall(symbols);
        function makeAjaxCall(param)
        {
			$.ajax({
				type: "GET",
                //url: "/IEX/wwe/",
                url: "https://api.iextrading.com/1.0/tops?symbols=" + param,
                success: function (result)
                {
                    $.each(result, function(i, value)
                    {
                        $("#" + value.symbol).html("<div class='"+ value.symbol +"'>" + " " + "<b>Symbol: " + value.symbol + "</b>" + "<br>Price: " + "<span class='change'>" + value.lastSalePrice.toFixed(2) + "</span>" + "<br>Volume: " + value.volume + "</div>");
                    });

                    var counter = 0;
                    // Loop through each stock and compare the price to the old price
                    $('.change').each(function()
                    {    
                        var change = (parseFloat($(this).text()) - localStorage.getItem(counter.toString())).toFixed(2);
                        change = change;

                        // Compares current stock Price with previous Price
                        if(parseFloat($(this).text()) < localStorage.getItem(counter.toString()))
                        { 
                            $(this).css('color','#E60000').append(" " + change); 
                        }
                        else if(parseFloat($(this).text()) > localStorage.getItem(counter.toString()))
                        { 
                            $(this).css('color','#32cd32').append(" " + change); 
                        }

                        // Sets up previous Price
                        localStorage.setItem(counter.toString(), parseFloat($(this).text()));
                        counter++;
                    });
				}
			});
        }
    };
    
    // Setup time to call loadData time in milliseconds
	const TIME = 2 * 1000;
    $(() =>
    {
		loadData();
		setInterval(loadData, TIME);
    });

    window.onbeforeunload = function()
    {
        localStorage.removeItem(key);
        return '';
    };
});
</script>

@foreach(var i in @ViewBag.TOPS)
{
    @i.symbol
    <br>
}