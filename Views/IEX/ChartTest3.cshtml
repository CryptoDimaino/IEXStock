@{
    ViewData["Title"] = "Chart Test";

}

<script src="https://unpkg.com/babel-polyfill@6.26.0/dist/polyfill.js"></script>
<script src="https://unpkg.com/custom-event-polyfill@0.3.0/custom-event-polyfill.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/document-register-element/1.8.0/document-register-element.js"></script>
<!-- use babel so that we can use arrow functions and other goodness in this block! -->
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
<script src="https://unpkg.com/d3@5.5.0"></script>
<script src="https://unpkg.com/d3fc@14.0.3"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>


<input type="hidden" id="customInput1" data-value = "@ViewBag.YearToDateChart" />


<script>
const volumeSeries = fc.autoBandwidth(fc.seriesSvgBar())
  .mainValue(d => d.volume)
	.crossValue(d => d.date)
	.decorate(sel =>
    sel.enter()
    	.attr('fill', d => d.open > d.close ? 'red' : 'green')
   )

// adapt the d3 time scale to add discontinuities, so that weekends are removed
const start = new Date(2019, 1, 18);
const end = new Date(2019, 1, 19);
console.log(start);
console.log(end);
const range = fc.discontinuitySkipWeekends();
const xScale = fc.scaleDiscontinuous(d3.scaleTime())
  //.discontinuityProvider(fc.discontinuityRange([start,end]))
  .discontinuityProvider(fc.discontinuitySkipWeekends());
  
const chart = fc.chartSvgCartesian(
    xScale,
    d3.scaleLinear()
  )
	.yOrient('left')
	.yLabel('volume (millions of dollars)')
  .yTickFormat(d3.format(',.3s'))
	.plotArea(volumeSeries);

// use the extent component to determine the x and y domain
const durationDay = 864e5;
const xExtent = fc.extentDate()
    .accessors([d => d.date])
	// pad by one day on either side of the scale
	.padUnit('domain')
	.pad([durationDay, durationDay]);

const yExtent = fc.extentLinear()
	.accessors([d => d.volume])
	.include([0])
	// pad by 10% at the upper end
	.pad([0, 0.1]);

const parseDate = d3.timeParse("%Y-%m-%d");

var list1 = $("#customInput1").data("value");
var myBlob1 = URL.createObjectURL(new Blob([list1], {type : "text/csv"}));

  d3.csv(myBlob1,
  row => ({
  	open: Number(row.open),
  	close: Number(row.close),
  	volume: Number(row.volume),
  	date: parseDate(row.date)
	})).then((data) => {
  	//data = data.slice(0, 200);

    // set the domain based on the data
    chart.xDomain(xExtent(data))
      .yDomain(yExtent(data))

    // select and render
    d3.select('#chart-element')
      .datum(data)
      .call(chart);
  });
</script>


<div class="text-center">
    <h1 class="display-4">Yearly Chart Test</h1>
</div>
<div id='chart-element' style='height: 600px'></div>
<a asp-controller="IEX" asp-action="ChartTest">Daily Chart</a>  
<a asp-controller="IEX" asp-action="ChartTest1">Monthly Chart</a>  
<a asp-controller="IEX" asp-action="ChartTest2">One Year Chart</a>  